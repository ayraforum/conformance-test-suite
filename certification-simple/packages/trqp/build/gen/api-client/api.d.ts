/**
 * ToIP Trust Registry (Query) Protocol v2 - Working Draft
 * # Trust Registry capabilities * Allow querying for critical items in a digital trust ecosystem: Entities, Registries, and Resources that are required to operate in the ecosysystem. # Registry of Registries (RoR) capabilities. RoR capabilities include:   * Listing Registries that are known (to the registry being queried).   * list the acknowledged trust registries that the RoR recognizes and what that may mean in the context of a particular governance framework.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: darrell.odonnell@continuumloop.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 * Creates assurance level as a top-level/first-class-citizen of a Trust Registry. AssuranceLevel values MUST be defined in an EGF if they are used.
 * @export
 * @interface AssuranceLevelType
 */
export interface AssuranceLevelType {
    /**
     *
     * @type {string}
     * @memberof AssuranceLevelType
     */
    'identifier': string;
    /**
     *
     * @type {string}
     * @memberof AssuranceLevelType
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof AssuranceLevelType
     */
    'description': string;
}
/**
 *
 * @export
 * @interface AuthorizationResponseType
 */
export interface AuthorizationResponseType {
    /**
     * The VID that identifies the Entity that may (i.e. it may be expired, revoked, terminated)  hold the particular Authorization.
     * @type {string}
     * @memberof AuthorizationResponseType
     */
    'entityID': string;
    /**
     * The unique string that identifies the Authorization.
     * @type {string}
     * @memberof AuthorizationResponseType
     */
    'authorizationUniqueString': string;
    /**
     * the VID that identifies the particular Authorization.
     * @type {string}
     * @memberof AuthorizationResponseType
     */
    'authorizationID'?: string;
    /**
     *
     * @type {string}
     * @memberof AuthorizationResponseType
     */
    'description': string;
    /**
     * The Assurance Level for the Authorization. Defined in the EGF. [OPTIONAL]
     * @type {AssuranceLevelType}
     * @memberof AuthorizationResponseType
     */
    'assuranceLevel'?: AssuranceLevelType;
    /**
     *
     * @type {StatusType}
     * @memberof AuthorizationResponseType
     */
    'authorizationStatus'?: StatusType;
    /**
     * The Validity dates related to this particular authorization.
     * @type {ValidityDatesType}
     * @memberof AuthorizationResponseType
     */
    'authorizationValidity'?: ValidityDatesType;
}
/**
 *
 * @export
 * @interface AuthorizationType
 */
export interface AuthorizationType {
    /**
     *
     * @type {string}
     * @memberof AuthorizationType
     */
    'identifier': string;
    /**
     *
     * @type {string}
     * @memberof AuthorizationType
     */
    'simplename': string;
    /**
     *
     * @type {string}
     * @memberof AuthorizationType
     */
    'description': string;
    /**
     * The Assurance Level for the Authorization. Defined in the EGF. [OPTIONAL]
     * @type {AssuranceLevelType}
     * @memberof AuthorizationType
     */
    'assuranceLevel'?: AssuranceLevelType;
}
/**
 *
 * @export
 * @interface EntityType
 */
export interface EntityType {
    /**
     * The primary identifier for the Entity (i.e. the primary key)
     * @type {string}
     * @memberof EntityType
     */
    'entityVID'?: string;
    /**
     *
     * @type {string}
     * @memberof EntityType
     */
    'governanceFrameworkVID': string;
    /**
     * A VID identifying the registered entity\'s Primary Trust Registry
     * @type {string}
     * @memberof EntityType
     */
    'primaryTrustRegistryVID'?: string;
    /**
     *
     * @type {Array<AuthorizationType>}
     * @memberof EntityType
     */
    'authorizations'?: Array<AuthorizationType>;
    /**
     *
     * @type {Array<string>}
     * @memberof EntityType
     */
    'secondaryTrustRegistries'?: Array<string>;
    /**
     *
     * @type {Array<NamespaceType>}
     * @memberof EntityType
     */
    'participatingNamepaces'?: Array<NamespaceType>;
    /**
     *
     * @type {ValidityDatesType}
     * @memberof EntityType
     */
    'entityDataValidity'?: ValidityDatesType;
    /**
     *
     * @type {StatusType}
     * @memberof EntityType
     */
    'registrationStatus'?: StatusType;
}
/**
 *
 * @export
 * @interface ExportFile
 */
export interface ExportFile {
    /**
     * The time of the data extraction.
     * @type {string}
     * @memberof ExportFile
     */
    'extractdatetime': string;
    /**
     * Version string [OPTIONAL]
     * @type {string}
     * @memberof ExportFile
     */
    'version'?: string;
    /**
     *
     * @type {ValidityDatesType}
     * @memberof ExportFile
     */
    'validity'?: ValidityDatesType;
    /**
     *
     * @type {ExportLookups}
     * @memberof ExportFile
     */
    'lookups'?: ExportLookups;
    /**
     * Array of RegistryQueryType
     * @type {Array<RegistryType>}
     * @memberof ExportFile
     */
    'registries'?: Array<RegistryType>;
    /**
     *
     * @type {Array<EntityType>}
     * @memberof ExportFile
     */
    'entities'?: Array<EntityType>;
    /**
     * Array of RegistryQueryType
     * @type {Array<RegistryType>}
     * @memberof ExportFile
     */
    'resources'?: Array<RegistryType>;
}
/**
 *
 * @export
 * @interface ExportLookups
 */
export interface ExportLookups {
    /**
     *
     * @type {Array<VIDMethodType>}
     * @memberof ExportLookups
     */
    'VIDMethods'?: Array<VIDMethodType>;
    /**
     *
     * @type {Array<AssuranceLevelType>}
     * @memberof ExportLookups
     */
    'AssuranceLevels'?: Array<AssuranceLevelType>;
    /**
     *
     * @type {Array<AuthorizationType>}
     * @memberof ExportLookups
     */
    'Authorizations'?: Array<AuthorizationType>;
    /**
     *
     * @type {Array<NamespaceType>}
     * @memberof ExportLookups
     */
    'Namespaces'?: Array<NamespaceType>;
}
/**
 * Integrity object
 * @export
 * @interface IntegrityType
 */
export interface IntegrityType {
    /**
     * Hashing algorithm well-known-name. TODO: Reference to some list?
     * @type {string}
     * @memberof IntegrityType
     */
    'hashtype': string;
    /**
     * the hash of the data.
     * @type {string}
     * @memberof IntegrityType
     */
    'hash': string;
}
/**
 * Namespace object - formal name, EGF that governs namespace, VC/DIDAuth/etc.
 * @export
 * @interface NamespaceType
 */
export interface NamespaceType {
    /**
     *
     * @type {string}
     * @memberof NamespaceType
     */
    'identifier': string;
    /**
     *
     * @type {string}
     * @memberof NamespaceType
     */
    'canonicalString': string;
    /**
     * URI of the EGF that defines the namespace.
     * @type {string}
     * @memberof NamespaceType
     */
    'egfURI'?: string;
    /**
     *
     * @type {string}
     * @memberof NamespaceType
     */
    'description'?: string;
}
/**
 * A Problem Details object (RFC 7807)
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    /**
     * An absolute URI that identifies the problem type
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string;
    /**
     * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string;
    /**
     * An absolute URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string;
}
/**
 * @type RegistriesRegistryVIDGet200Response
 * @export
 */
export type RegistriesRegistryVIDGet200Response = ResourceDirectType | ResourceReferencedType;
/**
 *
 * @export
 * @interface RegistryMetadataType
 */
export interface RegistryMetadataType {
    /**
     *
     * @type {string}
     * @memberof RegistryMetadataType
     */
    'lastupdated': string;
    /**
     * URI of the EGF that governs the Trust Registry.
     * @type {string}
     * @memberof RegistryMetadataType
     */
    'primaryEGFURI'?: string;
    /**
     * List of URIs of Ecosystem Governance Frameworks that this Trust Registry operates under, in addition to the .primaryEGFURI
     * @type {Array<string>}
     * @memberof RegistryMetadataType
     */
    'additionalEGFURIs'?: Array<string>;
    /**
     *
     * @type {Array<NamespaceType>}
     * @memberof RegistryMetadataType
     */
    'participatingNamepaces'?: Array<NamespaceType>;
    /**
     * language codes (RFC 4646 - https://datatracker.ietf.org/doc/html/rfc4646)
     * @type {Array<string>}
     * @memberof RegistryMetadataType
     */
    'languages'?: Array<string>;
}
/**
 * Data structure for basic Trust Registry indication of what the queried TR will state about another TR.
 * @export
 * @interface RegistryType
 */
export interface RegistryType {
    /**
     *
     * @type {string}
     * @memberof RegistryType
     */
    'identifier': string;
    /**
     *
     * @type {string}
     * @memberof RegistryType
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof RegistryType
     */
    'description'?: string;
    /**
     * URI of the EGF that governs the Trust Registry.
     * @type {string}
     * @memberof RegistryType
     */
    'primaryEGFURI'?: string;
    /**
     * List of URIs of Ecosystem Governance Frameworks that this Trust Registry operates under, in addition to the .primaryEGFURI
     * @type {Array<string>}
     * @memberof RegistryType
     */
    'additionalEGFURIs'?: Array<string>;
    /**
     *
     * @type {Array<NamespaceType>}
     * @memberof RegistryType
     */
    'participatingNamepaces'?: Array<NamespaceType>;
    /**
     * Relationship types - how does the TR that is being queried consider the other TR.   * peer - registy is recognized as a peer under another jurisdiction or governance mechanism.   * superior - registry is above this TR in a hierarchy.   * subordinate - registry is subordinate to this TR in a hierarchy.   * metaregistry - registry being queried is considered (by this TR) to be a metaregistry (aka registry of registries)
     * @type {string}
     * @memberof RegistryType
     */
    'peerType'?: RegistryTypePeerTypeEnum;
}
export declare const RegistryTypePeerTypeEnum: {
    readonly Peer: "peer";
    readonly Superior: "superior";
    readonly Subordinate: "subordinate";
    readonly Metaregistry: "metaregistry";
};
export type RegistryTypePeerTypeEnum = typeof RegistryTypePeerTypeEnum[keyof typeof RegistryTypePeerTypeEnum];
/**
 * Resource that is served directly by this trust registry.
 * @export
 * @interface ResourceDirectType
 */
export interface ResourceDirectType {
    /**
     *
     * @type {string}
     * @memberof ResourceDirectType
     */
    'identifier': string;
    /**
     *
     * @type {string}
     * @memberof ResourceDirectType
     */
    'lastupdated': string;
    /**
     * TODO: DECIDE about mimeType vs. dataType as property name The `kind` of resource (e.g. credential-definition, schema-definition, revocation-registry). intended to be used by recipient for processing of the data payload.
     * @type {string}
     * @memberof ResourceDirectType
     */
    'datatype': string;
    /**
     * string providing an URI formatted according to IETF RFC 3986.
     * @type {string}
     * @memberof ResourceDirectType
     */
    'resourceURI'?: string;
    /**
     * JSON object
     * @type {object}
     * @memberof ResourceDirectType
     */
    'payloadJSON'?: object;
}
/**
 * Resource that is provided by reference to a different source.
 * @export
 * @interface ResourceReferencedType
 */
export interface ResourceReferencedType {
    /**
     *
     * @type {string}
     * @memberof ResourceReferencedType
     */
    'identifier': string;
    /**
     *
     * @type {string}
     * @memberof ResourceReferencedType
     */
    'lastupdated': string;
    /**
     * TODO: DECIDE about mimeType vs. dataType as property name The `kind` of resource (e.g. credential-definition, schema-definition, revocation-registry). intended to be used by recipient for processing of the data payload.
     * @type {string}
     * @memberof ResourceReferencedType
     */
    'datatype': string;
    /**
     * string providing an URI formatted according to IETF RFC 3986.
     * @type {string}
     * @memberof ResourceReferencedType
     */
    'resourceURI': string;
    /**
     *
     * @type {IntegrityType}
     * @memberof ResourceReferencedType
     */
    'integrity'?: IntegrityType;
}
/**
 * Status and textual description for Entity Registration Status, and Entity Authorization Status
 * @export
 * @interface StatusType
 */
export interface StatusType {
    /**
     * Provides a current status for entity at time of the query. - current - status is current in the system of record. - expired - status has expired in the system of record. - terminated - entity has voluntarily terminated its status. - revoked -  status was revoked by the governing authority.
     * @type {string}
     * @memberof StatusType
     */
    'status': StatusTypeStatusEnum;
    /**
     * Optional free text that expands on the status parameter.
     * @type {string}
     * @memberof StatusType
     */
    'detail'?: string;
}
export declare const StatusTypeStatusEnum: {
    readonly Current: "current";
    readonly Expired: "expired";
    readonly Terminated: "terminated";
    readonly Revoked: "revoked";
};
export type StatusTypeStatusEnum = typeof StatusTypeStatusEnum[keyof typeof StatusTypeStatusEnum];
/**
 * Trust Establishment Document per https://identity.foundation/trust-establishment/
 * @export
 * @interface TrustEstablishmentDocument
 */
export interface TrustEstablishmentDocument {
    /**
     *
     * @type {string}
     * @memberof TrustEstablishmentDocument
     */
    'TBD': string;
}
/**
 * DID Method supported by the trust registry. May include the maximum
 * @export
 * @interface VIDMethodType
 */
export interface VIDMethodType {
    /**
     * as \"maintained\" at https://w3c.github.io/did-spec-registries/#did-methods TODO: do better...
     * @type {string}
     * @memberof VIDMethodType
     */
    'identifier': string;
    /**
     * A DID Method may, due to technical or human trust considerations be limited in the assurance level that it can provide.
     * @type {AssuranceLevelType}
     * @memberof VIDMethodType
     */
    'maximumAssuranceLevel'?: AssuranceLevelType;
}
/**
 * Date and Time of validity.
 * @export
 * @interface ValidityDatesType
 */
export interface ValidityDatesType {
    /**
     * Indicates that the Identifier status applies at the indicated time. A time in the past indicates when the last status change was recorded in the Trust Registry.
     * @type {string}
     * @memberof ValidityDatesType
     */
    'validFromDT'?: string;
    /**
     * Indicates the validity ends/ended at this date and time. A time in the past may indicate that the data have expired. A blank response indicates that the validity does not have an end value (i.e. does not or has not expired yet).
     * @type {string}
     * @memberof ValidityDatesType
     */
    'validUntilDT'?: string;
}
/**
 * LookupsApi - axios parameter creator
 * @export
 */
export declare const LookupsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a list of the assurance levels that are in use by this Trust Registry (and its governing EGF).
     * @param {string} egfURI The URI-based identifier of the Ecosystem Governance Framework that the assurance levels apply to. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupAssurancelevelsGet: (egfURI: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of Rights that are used in this Trust Registry.
     * @param {string} egfURI The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupAuthorizationsGet: (egfURI: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the namespaces that are supported in this trust Registry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupNamespacesGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of DID Methods that are supported by a particular Governance Framework.
     * @param {Array<VIDMethodType>} egfURI Provides a list of DID-methods that are supported by this trust registry. MAY include Maximum Assurance Level that a DID Method is set at under the EGF.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupVidmethodsGet: (egfURI: Array<VIDMethodType>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LookupsApi - functional programming interface
 * @export
 */
export declare const LookupsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a list of the assurance levels that are in use by this Trust Registry (and its governing EGF).
     * @param {string} egfURI The URI-based identifier of the Ecosystem Governance Framework that the assurance levels apply to. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupAssurancelevelsGet(egfURI: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssuranceLevelType>>>;
    /**
     *
     * @summary Get a list of Rights that are used in this Trust Registry.
     * @param {string} egfURI The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupAuthorizationsGet(egfURI: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthorizationType>>>;
    /**
     *
     * @summary Get the namespaces that are supported in this trust Registry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupNamespacesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NamespaceType>>>;
    /**
     *
     * @summary Get a list of DID Methods that are supported by a particular Governance Framework.
     * @param {Array<VIDMethodType>} egfURI Provides a list of DID-methods that are supported by this trust registry. MAY include Maximum Assurance Level that a DID Method is set at under the EGF.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupVidmethodsGet(egfURI: Array<VIDMethodType>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VIDMethodType>>>;
};
/**
 * LookupsApi - factory interface
 * @export
 */
export declare const LookupsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get a list of the assurance levels that are in use by this Trust Registry (and its governing EGF).
     * @param {string} egfURI The URI-based identifier of the Ecosystem Governance Framework that the assurance levels apply to. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupAssurancelevelsGet(egfURI: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<AssuranceLevelType>>;
    /**
     *
     * @summary Get a list of Rights that are used in this Trust Registry.
     * @param {string} egfURI The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupAuthorizationsGet(egfURI: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<AuthorizationType>>;
    /**
     *
     * @summary Get the namespaces that are supported in this trust Registry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupNamespacesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<NamespaceType>>;
    /**
     *
     * @summary Get a list of DID Methods that are supported by a particular Governance Framework.
     * @param {Array<VIDMethodType>} egfURI Provides a list of DID-methods that are supported by this trust registry. MAY include Maximum Assurance Level that a DID Method is set at under the EGF.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupVidmethodsGet(egfURI: Array<VIDMethodType>, options?: RawAxiosRequestConfig): AxiosPromise<Array<VIDMethodType>>;
};
/**
 * LookupsApi - object-oriented interface
 * @export
 * @class LookupsApi
 * @extends {BaseAPI}
 */
export declare class LookupsApi extends BaseAPI {
    /**
     *
     * @summary Get a list of the assurance levels that are in use by this Trust Registry (and its governing EGF).
     * @param {string} egfURI The URI-based identifier of the Ecosystem Governance Framework that the assurance levels apply to. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupsApi
     */
    lookupAssurancelevelsGet(egfURI: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AssuranceLevelType[], any>>;
    /**
     *
     * @summary Get a list of Rights that are used in this Trust Registry.
     * @param {string} egfURI The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupsApi
     */
    lookupAuthorizationsGet(egfURI: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthorizationType[], any>>;
    /**
     *
     * @summary Get the namespaces that are supported in this trust Registry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupsApi
     */
    lookupNamespacesGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<NamespaceType[], any>>;
    /**
     *
     * @summary Get a list of DID Methods that are supported by a particular Governance Framework.
     * @param {Array<VIDMethodType>} egfURI Provides a list of DID-methods that are supported by this trust registry. MAY include Maximum Assurance Level that a DID Method is set at under the EGF.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupsApi
     */
    lookupVidmethodsGet(egfURI: Array<VIDMethodType>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VIDMethodType[], any>>;
}
/**
 * MetadataApi - axios parameter creator
 * @export
 */
export declare const MetadataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Metadata object.
     * @summary Provides metadata object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadataGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MetadataApi - functional programming interface
 * @export
 */
export declare const MetadataApiFp: (configuration?: Configuration) => {
    /**
     * Metadata object.
     * @summary Provides metadata object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadataGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryMetadataType>>;
};
/**
 * MetadataApi - factory interface
 * @export
 */
export declare const MetadataApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Metadata object.
     * @summary Provides metadata object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadataGet(options?: RawAxiosRequestConfig): AxiosPromise<RegistryMetadataType>;
};
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export declare class MetadataApi extends BaseAPI {
    /**
     * Metadata object.
     * @summary Provides metadata object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    metadataGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RegistryMetadataType, any>>;
}
/**
 * OfflineApi - axios parameter creator
 * @export
 */
export declare const OfflineApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Allows querying to determine the status of an Issuer, as identified by their Identifier (unique), credential type, and EGF that they are operating under.
     * @summary Access a full data file that can be used offline.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOfflineFile: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Allows querying to determine the status of an Issuer, as identified by their Identifier (unique), credential type, and EGF that they are operating under.
     * @summary Access a full data file that can be used offline.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTED: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OfflineApi - functional programming interface
 * @export
 */
export declare const OfflineApiFp: (configuration?: Configuration) => {
    /**
     * Allows querying to determine the status of an Issuer, as identified by their Identifier (unique), credential type, and EGF that they are operating under.
     * @summary Access a full data file that can be used offline.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOfflineFile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportFile>>;
    /**
     * Allows querying to determine the status of an Issuer, as identified by their Identifier (unique), credential type, and EGF that they are operating under.
     * @summary Access a full data file that can be used offline.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTED(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrustEstablishmentDocument>>;
};
/**
 * OfflineApi - factory interface
 * @export
 */
export declare const OfflineApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Allows querying to determine the status of an Issuer, as identified by their Identifier (unique), credential type, and EGF that they are operating under.
     * @summary Access a full data file that can be used offline.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOfflineFile(options?: RawAxiosRequestConfig): AxiosPromise<ExportFile>;
    /**
     * Allows querying to determine the status of an Issuer, as identified by their Identifier (unique), credential type, and EGF that they are operating under.
     * @summary Access a full data file that can be used offline.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTED(options?: RawAxiosRequestConfig): AxiosPromise<TrustEstablishmentDocument>;
};
/**
 * OfflineApi - object-oriented interface
 * @export
 * @class OfflineApi
 * @extends {BaseAPI}
 */
export declare class OfflineApi extends BaseAPI {
    /**
     * Allows querying to determine the status of an Issuer, as identified by their Identifier (unique), credential type, and EGF that they are operating under.
     * @summary Access a full data file that can be used offline.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfflineApi
     */
    getOfflineFile(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportFile, any>>;
    /**
     * Allows querying to determine the status of an Issuer, as identified by their Identifier (unique), credential type, and EGF that they are operating under.
     * @summary Access a full data file that can be used offline.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfflineApi
     */
    getTED(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TrustEstablishmentDocument, any>>;
}
/**
 * RegistryApi - axios parameter creator
 * @export
 */
export declare const RegistryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Determine whether an Entity has a particular Authorization.
     * @param {string} entityVID The VID-based identifier of a VID/DID/AID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {string} [authorizationVID] The identifier of the Authorization that is being queried for this Entity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entitiesEntityVIDAuthorizationGet: (entityVID: string, authorizationVID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Determine whether an Entity has a particular Authorization.
     * @param {string} entityVID The VID-based identifier of a VID/DID/AID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entitiesEntityVIDAuthorizationsGet: (entityVID: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns Registry Information about a particular entity that is represented in the queried system.
     * @param {string} entityid The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {string} [authorizationVID] The identifier of the Authorization that is being queried for this Entity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entititiesEntityidGet: (entityid: string, authorizationVID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Query this Trust Registry about its recognition of another Trust Registry.
     * @param {string} [namespaceVID] Filter in only the namespace requested - show all registries otherwise. The URI-based Verifiable Identifier (VID) (e.g. DID or X.509 VID). Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {string} [eGFVID] Filter in only the registries under the specified EGF (by EGF DID). Defaults to be limited to the EGFURI that is being queried at the root. The URI-based Verifiable Identifier (VID) (e.g. DID or X.509 VID). Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registriesRecognizedRegistriesGet: (namespaceVID?: string, eGFVID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get resource data indicated by DID.
     * @param {string} registryVID The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registriesRegistryVIDGet: (registryVID: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Query this Trust Registry about its recognition of a specific Trust Registry. TODO: determine RoR (registry of registry) impacts here.
     * @param {string} registryVID The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registriesRegistryVIDRecognizedRegistriesGet: (registryVID: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RegistryApi - functional programming interface
 * @export
 */
export declare const RegistryApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Determine whether an Entity has a particular Authorization.
     * @param {string} entityVID The VID-based identifier of a VID/DID/AID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {string} [authorizationVID] The identifier of the Authorization that is being queried for this Entity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entitiesEntityVIDAuthorizationGet(entityVID: string, authorizationVID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthorizationResponseType>>>;
    /**
     *
     * @summary Determine whether an Entity has a particular Authorization.
     * @param {string} entityVID The VID-based identifier of a VID/DID/AID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entitiesEntityVIDAuthorizationsGet(entityVID: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthorizationResponseType>>>;
    /**
     *
     * @summary Returns Registry Information about a particular entity that is represented in the queried system.
     * @param {string} entityid The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {string} [authorizationVID] The identifier of the Authorization that is being queried for this Entity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entititiesEntityidGet(entityid: string, authorizationVID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityType>>;
    /**
     *
     * @summary Query this Trust Registry about its recognition of another Trust Registry.
     * @param {string} [namespaceVID] Filter in only the namespace requested - show all registries otherwise. The URI-based Verifiable Identifier (VID) (e.g. DID or X.509 VID). Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {string} [eGFVID] Filter in only the registries under the specified EGF (by EGF DID). Defaults to be limited to the EGFURI that is being queried at the root. The URI-based Verifiable Identifier (VID) (e.g. DID or X.509 VID). Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registriesRecognizedRegistriesGet(namespaceVID?: string, eGFVID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RegistryType>>>;
    /**
     *
     * @summary Get resource data indicated by DID.
     * @param {string} registryVID The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registriesRegistryVIDGet(registryVID: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistriesRegistryVIDGet200Response>>;
    /**
     *
     * @summary Query this Trust Registry about its recognition of a specific Trust Registry. TODO: determine RoR (registry of registry) impacts here.
     * @param {string} registryVID The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registriesRegistryVIDRecognizedRegistriesGet(registryVID: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RegistryType>>>;
};
/**
 * RegistryApi - factory interface
 * @export
 */
export declare const RegistryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Determine whether an Entity has a particular Authorization.
     * @param {string} entityVID The VID-based identifier of a VID/DID/AID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {string} [authorizationVID] The identifier of the Authorization that is being queried for this Entity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entitiesEntityVIDAuthorizationGet(entityVID: string, authorizationVID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<AuthorizationResponseType>>;
    /**
     *
     * @summary Determine whether an Entity has a particular Authorization.
     * @param {string} entityVID The VID-based identifier of a VID/DID/AID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entitiesEntityVIDAuthorizationsGet(entityVID: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<AuthorizationResponseType>>;
    /**
     *
     * @summary Returns Registry Information about a particular entity that is represented in the queried system.
     * @param {string} entityid The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {string} [authorizationVID] The identifier of the Authorization that is being queried for this Entity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entititiesEntityidGet(entityid: string, authorizationVID?: string, options?: RawAxiosRequestConfig): AxiosPromise<EntityType>;
    /**
     *
     * @summary Query this Trust Registry about its recognition of another Trust Registry.
     * @param {string} [namespaceVID] Filter in only the namespace requested - show all registries otherwise. The URI-based Verifiable Identifier (VID) (e.g. DID or X.509 VID). Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {string} [eGFVID] Filter in only the registries under the specified EGF (by EGF DID). Defaults to be limited to the EGFURI that is being queried at the root. The URI-based Verifiable Identifier (VID) (e.g. DID or X.509 VID). Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registriesRecognizedRegistriesGet(namespaceVID?: string, eGFVID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RegistryType>>;
    /**
     *
     * @summary Get resource data indicated by DID.
     * @param {string} registryVID The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registriesRegistryVIDGet(registryVID: string, options?: RawAxiosRequestConfig): AxiosPromise<RegistriesRegistryVIDGet200Response>;
    /**
     *
     * @summary Query this Trust Registry about its recognition of a specific Trust Registry. TODO: determine RoR (registry of registry) impacts here.
     * @param {string} registryVID The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registriesRegistryVIDRecognizedRegistriesGet(registryVID: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RegistryType>>;
};
/**
 * RegistryApi - object-oriented interface
 * @export
 * @class RegistryApi
 * @extends {BaseAPI}
 */
export declare class RegistryApi extends BaseAPI {
    /**
     *
     * @summary Determine whether an Entity has a particular Authorization.
     * @param {string} entityVID The VID-based identifier of a VID/DID/AID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {string} [authorizationVID] The identifier of the Authorization that is being queried for this Entity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    entitiesEntityVIDAuthorizationGet(entityVID: string, authorizationVID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthorizationResponseType[], any>>;
    /**
     *
     * @summary Determine whether an Entity has a particular Authorization.
     * @param {string} entityVID The VID-based identifier of a VID/DID/AID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    entitiesEntityVIDAuthorizationsGet(entityVID: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthorizationResponseType[], any>>;
    /**
     *
     * @summary Returns Registry Information about a particular entity that is represented in the queried system.
     * @param {string} entityid The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {string} [authorizationVID] The identifier of the Authorization that is being queried for this Entity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    entititiesEntityidGet(entityid: string, authorizationVID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EntityType, any>>;
    /**
     *
     * @summary Query this Trust Registry about its recognition of another Trust Registry.
     * @param {string} [namespaceVID] Filter in only the namespace requested - show all registries otherwise. The URI-based Verifiable Identifier (VID) (e.g. DID or X.509 VID). Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {string} [eGFVID] Filter in only the registries under the specified EGF (by EGF DID). Defaults to be limited to the EGFURI that is being queried at the root. The URI-based Verifiable Identifier (VID) (e.g. DID or X.509 VID). Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    registriesRecognizedRegistriesGet(namespaceVID?: string, eGFVID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RegistryType[], any>>;
    /**
     *
     * @summary Get resource data indicated by DID.
     * @param {string} registryVID The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    registriesRegistryVIDGet(registryVID: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RegistriesRegistryVIDGet200Response, any>>;
    /**
     *
     * @summary Query this Trust Registry about its recognition of a specific Trust Registry. TODO: determine RoR (registry of registry) impacts here.
     * @param {string} registryVID The URI-based identifier of a DID or X.509 Issuer. Allows reserved characters per RFC3986. Do **NOT** escape the URI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    registriesRegistryVIDRecognizedRegistriesGet(registryVID: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RegistryType[], any>>;
}
