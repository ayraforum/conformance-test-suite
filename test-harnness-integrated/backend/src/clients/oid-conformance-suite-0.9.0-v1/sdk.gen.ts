// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { CreateTestPlanData, CreateTestPlanError, CreateTestPlanResponse, GetTestPlansData, GetTestPlansError, GetTestPlansResponse, GetTestPlanData, GetTestPlanError, GetTestPlanResponse, DeleteMutableTestPlanData, DeleteMutableTestPlanError, DeleteMutableTestPlanResponse, PublishTestPlanData, PublishTestPlanError, PublishTestPlanResponse, MakeTestPlanMutableData, MakeTestPlanMutableError, MakeTestPlanMutableResponse, GetTestPlanInfoData, GetTestPlanInfoError, GetTestPlanInfoResponse, GetAvailableTestPlansError, GetAvailableTestPlansResponse, GetAllTestLogsData, GetAllTestLogsError, GetAllTestLogsResponse, GetTestLogData, GetTestLogError, GetTestLogResponse, ExportTestLogData, ExportTestLogError, ExportTestLogResponse, ExportTestHtmlData, ExportTestHtmlError, ExportTestHtmlResponse, GetAllTestInfoError, GetAllTestInfoResponse, GetTestInfoData, GetTestInfoError, GetTestInfoResponse, PublishTestInfoData, PublishTestInfoError, PublishTestInfoResponse, CreateTestData, CreateTestError, CreateTestResponse, GetAvailableTestsError, GetAvailableTestsResponse, GetAllRunningTestIdsError, GetAllRunningTestIdsResponse, GetTestStatusData, GetTestStatusError, GetTestStatusResponse, StartTestData, StartTestError, StartTestResponse, CancelTestData, CancelTestError, CancelTestResponse, GetBrowserStatusData, GetBrowserStatusError, GetBrowserStatusResponse, VisitBrowserUrlData, VisitBrowserUrlError, VisitBrowserUrlResponse, GetJwksError, GetJwksResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Create test plan
 */
export const createTestPlan = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateTestPlanData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateTestPlanResponse, CreateTestPlanError, ThrowOnError>({
        ...options,
        url: '/plan'
    });
};

/**
 * Get a list of test plan instances with paging
 */
export const getTestPlans = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetTestPlansData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTestPlansResponse, GetTestPlansError, ThrowOnError>({
        ...options,
        url: '/plan'
    });
};

/**
 * Get test plan information by plan id
 */
export const getTestPlan = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTestPlanData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTestPlanResponse, GetTestPlanError, ThrowOnError>({
        ...options,
        url: '/plan/{id}'
    });
};

/**
 * Delete a test plan and related configuration
 * Requires the plan to be mutable
 */
export const deleteMutableTestPlan = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteMutableTestPlanData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteMutableTestPlanResponse, DeleteMutableTestPlanError, ThrowOnError>({
        ...options,
        url: '/plan/{id}'
    });
};

/**
 * Publish a test plan by plan Id
 */
export const publishTestPlan = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PublishTestPlanData, ThrowOnError>) => {
    return (options?.client ?? client).post<PublishTestPlanResponse, PublishTestPlanError, ThrowOnError>({
        ...options,
        url: '/plan/{id}/publish'
    });
};

/**
 * Make a test plan mutable again (requires administrator privileges)
 */
export const makeTestPlanMutable = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<MakeTestPlanMutableData, ThrowOnError>) => {
    return (options?.client ?? client).post<MakeTestPlanMutableResponse, MakeTestPlanMutableError, ThrowOnError>({
        ...options,
        url: '/plan/{id}/makemutable'
    });
};

/**
 * Get information for one test plan by name
 */
export const getTestPlanInfo = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTestPlanInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTestPlanInfoResponse, GetTestPlanInfoError, ThrowOnError>({
        ...options,
        url: '/plan/info/{planName}'
    });
};

/**
 * Get a list of available test plans and their attributes
 */
export const getAvailableTestPlans = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAvailableTestPlansResponse, GetAvailableTestPlansError, ThrowOnError>({
        ...options,
        url: '/plan/available'
    });
};

/**
 * Get all test logs with paging
 */
export const getAllTestLogs = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetAllTestLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllTestLogsResponse, GetAllTestLogsError, ThrowOnError>({
        ...options,
        url: '/log'
    });
};

/**
 * Get test log of given testId
 */
export const getTestLog = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTestLogData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTestLogResponse, GetTestLogError, ThrowOnError>({
        ...options,
        url: '/log/{id}'
    });
};

/**
 * Export test log by test id
 */
export const exportTestLog = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ExportTestLogData, ThrowOnError>) => {
    return (options?.client ?? client).get<ExportTestLogResponse, ExportTestLogError, ThrowOnError>({
        ...options,
        url: '/log/export/{id}'
    });
};

/**
 * Export test logs as html by test id
 */
export const exportTestHtml = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ExportTestHtmlData, ThrowOnError>) => {
    return (options?.client ?? client).get<ExportTestHtmlResponse, ExportTestHtmlError, ThrowOnError>({
        ...options,
        url: '/log/exporthtml/{id}'
    });
};

/**
 * Get information of all test module instances
 * Will return all run test modules if user is admin role, otherwise only the logged in user's tests will be returned. This API is currently disabled due to performance concerns.
 */
export const getAllTestInfo = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllTestInfoResponse, GetAllTestInfoError, ThrowOnError>({
        ...options,
        url: '/info'
    });
};

/**
 * Get test information by test id
 */
export const getTestInfo = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTestInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTestInfoResponse, GetTestInfoError, ThrowOnError>({
        ...options,
        url: '/info/{id}'
    });
};

/**
 * Publish test information
 */
export const publishTestInfo = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PublishTestInfoData, ThrowOnError>) => {
    return (options?.client ?? client).post<PublishTestInfoResponse, PublishTestInfoError, ThrowOnError>({
        ...options,
        url: '/info/{id}/publish'
    });
};

/**
 * Create test module instance
 * Normally a test plan should be created first. After a test is created, use /api/info/{testid} to wait for the test to be in the WAITING state before trying to interact with the test
 */
export const createTest = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateTestData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateTestResponse, CreateTestError, ThrowOnError>({
        ...options,
        url: '/runner'
    });
};

/**
 * Get list of available TestModule names
 */
export const getAvailableTests = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAvailableTestsResponse, GetAvailableTestsError, ThrowOnError>({
        ...options,
        url: '/runner/available'
    });
};

/**
 * Get list of running testIDs
 */
export const getAllRunningTestIds = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllRunningTestIdsResponse, GetAllRunningTestIdsError, ThrowOnError>({
        ...options,
        url: '/runner/running'
    });
};

/**
 * Get test status, results, and exposed strings
 */
export const getTestStatus = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTestStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTestStatusResponse, GetTestStatusError, ThrowOnError>({
        ...options,
        url: '/runner/{id}'
    });
};

/**
 * Start test by id
 */
export const startTest = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<StartTestData, ThrowOnError>) => {
    return (options?.client ?? client).post<StartTestResponse, StartTestError, ThrowOnError>({
        ...options,
        url: '/runner/{id}'
    });
};

/**
 * Cancel test by Id
 */
export const cancelTest = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CancelTestData, ThrowOnError>) => {
    return (options?.client ?? client).delete<CancelTestResponse, CancelTestError, ThrowOnError>({
        ...options,
        url: '/runner/{id}'
    });
};

/**
 * Get front-channel external URLs exposed to the [BrowserControl] for a given test
 */
export const getBrowserStatus = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetBrowserStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBrowserStatusResponse, GetBrowserStatusError, ThrowOnError>({
        ...options,
        url: '/runner/browser/{id}'
    });
};

/**
 * Mark front-channel external URL as visited
 */
export const visitBrowserUrl = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VisitBrowserUrlData, ThrowOnError>) => {
    return (options?.client ?? client).post<VisitBrowserUrlResponse, VisitBrowserUrlError, ThrowOnError>({
        ...options,
        url: '/runner/browser/{id}/visit'
    });
};

/**
 * Get JSON Web Key Set
 */
export const getJwks = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetJwksResponse, GetJwksError, ThrowOnError>({
        ...options,
        url: '/jwks'
    });
};